# sudo docker-compose --env-file ./config/app.env up -d
version: "3"
services:
  redisdb:
    image: redis:6-alpine
    container_name: ${REDIS_HOSTNAME}
    volumes:
      - ./.volumes/redis-data:/data
      - ./.volumes/redis.conf:/redis.conf:ro
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${REDIS_PORT}", "ping"]
      interval: 10s
      timeout: 10s
      retries: 3
    networks: 
      - edetector_net
    env_file: ./config/app.env
    
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ${RABBITMQ_HOSTNAME}
    volumes:
      - ./.volumes/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    ports:
      - ${RABBITMQ_WEB_PORT}:${RABBITMQ_WEB_PORT}
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USERNAME}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASSWORD}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_VHOST}"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 3
    env_file: ./config/app.env
    networks: 
      - edetector_net
    
  mariadb: 
    image: mariadb:10-jammy
    container_name: ${MARIADB_HOSTNAME}
    environment:
      MARIADB_DATABASE : ${MARIADB_DATABASE}
      MARIADB_USER: "${MARIADB_USER}"
      MARIADB_PASSWORD: "${MARIADB_PASSWORD}"
      MARIADB_ROOT_PASSWORD: "${MARIADB_ROOT_PASSWORD}"
      MARIADB_ALLOW_EMPTY_ROOT_PASSWORD : "yes"
    volumes:
      - ./.volumes/mariadb:/var/lib/mariadb
      - ./.volumes/etc/edetector:/etc/mariadb/conf.d
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - ${MARIADB_PORT}:${MARIADB_PORT}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -P ${MARIADB_PORT} -u${MARIADB_USER} -p${MARIADB_PASSWORD} | grep 'mysqld is alive' || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 3
    env_file: ./config/app.env
    networks: 
      - edetector_net

  mongo:
    image: mongo:5.0.13
    container_name: ${MONGO_HOSTNAME}
    networks:
      - graylog
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: ${ELASTICSEARCH_HOSTNAME}
    user: "1000:1000"
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=graylog
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail 127.0.0.1:9200/_cluster/health || exit 1"]
        interval: 10s
        timeout: 30s
        retries: 3
    volumes:
      - ./es_data:/usr/share/elasticsearch/data
    ports:
      - ${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}
    networks:
      - graylog

  graylog:
    image: graylog/graylog:5.0
    container_name: ${GRAYLOG_HOSTNAME}
    environment:
      GRAYLOG_HTTP_EXTERNAL_URI: http://0.0.0.0:${GRAYLOG_PORT}/
      GRAYLOG_PASSWORD_SECRET: ${GRAYLOG_PASSWORD_SECRET}
      GRAYLOG_ROOT_PASSWORD_SHA2: ${GRAYLOG_ROOT_PASSWORD_SHA2}
      GRAYLOG_ROOT_TIMEZONE: ${GRAYLOG_ROOT_TIMEZONE}
      GRAYLOG_CONTENT_PACKS_AUTO_INSTALL: graylog-content-pack.json
      GRAYLOG_CONTENT_PACKS_LOADER_ENABLED: true
      GRAYLOG_CONTENT_PACKS_DIR: /usr/share/graylog/data/contentpacks
    volumes:
      - ./graylog-setup/content-pack.json:/usr/share/graylog/data/contentpacks/graylog-content-pack.json
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:${ELASTICSEARCH_PORT} -- /docker-entrypoint.sh
    depends_on:
      mongo:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    ports:
      # Graylog web interface and REST API
      - ${GRAYLOG_PORT}:${GRAYLOG_PORT}
      # Syslog TCP
      - ${GRAYLOG_SYSLOG_PORT}:${GRAYLOG_SYSLOG_PORT}
      # Syslog UDP
      - ${GRAYLOG_SYSLOG_PORT}:${GRAYLOG_SYSLOG_PORT}/udp
      # GELF TCP
      - ${GRAYLOG_GELF_PORT}:${GRAYLOG_GELF_PORT}
      # GELF UDP
      - ${GRAYLOG_GELF_PORT}:${GRAYLOG_GELF_PORT}/udp
    networks: 
      - graylog
      - edetector_net

# ======================================= API Service ================================== #

  api:
    build:
      context: ./dockers/api
      dockerfile: Dockerfile
    container_name: api
    volumes:
      - ./.volumes/api:/log
    ports:
      - "5000:5000"
    depends_on:
      mariadb:
        condition: service_healthy
      redisdb:
        condition: service_healthy
      graylog:
        condition: service_healthy
    # restart: always
    env_file: ./config/app.env
    networks: 
      - edetector_net
    
  websocket:
    build:
      context: ./dockers/websocket
      dockerfile: Dockerfile
    container_name: websocket
    volumes:
      - ./.volumes/websocket:/log
    ports:
      - "5050:5050"
    depends_on:
      mariadb:
        condition: service_healthy
      redisdb:
        condition: service_healthy
      api:
        condition: service_started
    restart: always
    env_file: ./config/app.env
    networks: 
      - edetector_net

  taskservice:
    build:
      context: ./dockers/taskservice
      dockerfile: Dockerfile
    container_name: taskservice
    volumes:
      - ./.volumes/taskservice:/log
    depends_on:
      mariadb:
        condition: service_healthy
      redisdb:
        condition: service_healthy
      api:
        condition: service_started
    restart: always
    env_file: ./config/app.env
    networks: 
      - edetector_net

# ======================================= Working Server Service ================================== #

  workingserver:
    build:
      context: ./dockers/workingserver
      dockerfile: Dockerfile
    container_name: workingserver
    volumes:
      - ./.volumes/workingserver:/log
      - unstaged_db:/edetector_go/dbUnstage
    ports:
      - "5055:5055"
      - "1988:1988"
      - "1989:1989"
      - "1990:1990"
    depends_on:
      mariadb:
        condition: service_healthy
      redisdb:
        condition: service_healthy
      api:
        condition: service_started
      websocket:
        condition: service_started
    restart: always
    env_file: ./config/app.env
    networks: 
      - edetector_net

  dbparser:
    build:
      context: ./dockers/dbparser
      dockerfile: Dockerfile
    container_name: dbparser
    volumes:
      - ./.volumes/dbparser:/log
      - unstaged_db:/edetector_go/dbUnstage
    depends_on:
      mariadb:
        condition: service_healthy
      api:
        condition: service_started
    restart: always
    env_file: ./config/app.env
    networks: 
      - edetector_net

  connector:
    build:
      context: ./dockers/connector
      dockerfile: Dockerfile
    container_name: connector
    volumes:
      - ./.volumes/connector:/log
    depends_on:
      rabbitmq:
        condition: service_healthy
      api:
        condition: service_started
    restart: always
    env_file: ./config/app.env
    networks: 
      - edetector_net

  treebuilder:
    build:
      context: ./dockers/treebuilder
      dockerfile: Dockerfile
    container_name: treebuilder
    volumes:
      - ./.volumes/treebuilder:/log
    depends_on:
      rabbitmq:
        condition: service_healthy
      api:
        condition: service_started
    restart: always
    env_file: ./config/app.env
    networks: 
      - edetector_net

# ======================================= Frontend ================================== #

  # frontend:
  #   build:
  #     context: ./dockers/frontend
  #     dockerfile: Dockerfile
  #   container_name: frontend_react
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   env_file: ./config/app.env
  #   networks: 
  #     - edetector_net

volumes:
  unstaged_db:

networks:
  edetector_net:
    driver: bridge
  graylog:
    driver: bridge